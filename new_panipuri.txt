#include <AccelStepper.h>

void stepper_home();
void barrelrot();
void puripush();
void puriopn();

const int puri_catcher_step = 47;  // catcher PUL+ pin connected to Arduino digital pin 2
const int puri_catcher_dir = 46;  // catcher DIR+ pin connected to Arduino digital pin 3
const int barrel_step = 49;     // puri drop PUL+ pin connected to Arduino digital pin 4
const int barrel_dir = 48;     // puri drop DIR+ pin connected to Arduino digital pin 5
const int puri_catcher_home_sensor = A0;    // Sensor pin connected to Arduino digital pin 7
const int ir = A1;           // IR sensor pin connected to Arduino digital pin 8
const int conveyor_hmp=A2;  //LRP ->conveyor home position inductive proximity sensor
const int cat_step=45;     // NEN_step  PUL+ puri holder stepper motor
const int cat_dir=44;      // NEN-dir DIR+ puri holder stepper motor
const int cat_hmp=A5;     //LIS puri holder opener inductive proximity sensor


AccelStepper myStepper(AccelStepper::DRIVER, puri_catcher_step, puri_catcher_dir);
AccelStepper puriStepper(AccelStepper::DRIVER, barrel_step, barrel_dir);
AccelStepper puriopen(AccelStepper::DRIVER, cat_step, cat_dir);

void setup() {
  pinMode(puri_catcher_home_sensor, INPUT_PULLUP);  // Set sensor pin as input with pull-up resistor
  pinMode(ir, INPUT_PULLUP);
  pinMode(cat_hmp, INPUT);
  myStepper.setMaxSpeed(5000);       // Set max speed  puri catcher
  myStepper.setAcceleration(4000);   // Set acceleration

  puriStepper.setMaxSpeed(2000);      //barrel
  puriStepper.setAcceleration(5000);

  puriopen.setMaxSpeed(5000);           //puri_opener
  puriopen.setAcceleration(3000);


}

void loop() {
  stepper_home();
  delay(500);
  barrelrot();
  delay(500);
  puripush();
  //puriopn();    //dont run

  /*
  
  // Check for the puri dropper motor */

}

void stepper_home() {
  if (digitalRead(puri_catcher_home_sensor) == LOW) {
    myStepper.setSpeed(-2000);       // Set speed for moving backward
    while (digitalRead(puri_catcher_home_sensor) == LOW) {
      myStepper.runSpeed();          // Continue moving backward
    }
    myStepper.stop();
    delay(500);
    myStepper.setCurrentPosition(0); // Reset position for myStepper after homing
  }
}

void barrelrot() {
 if (digitalRead(puri_catcher_home_sensor) == HIGH) {
    while (digitalRead(ir) == HIGH) {
      puriStepper.move(500);            // Move 2200 steps forward
      puriStepper.runToPosition();       // Run to the new position
      delay(200);  // Add a small delay to prevent rapid cycling
    }
  }

  // Ensuring the puri dropper can operate again by resetting its position 
  if (digitalRead(puri_catcher_home_sensor) == LOW || digitalRead(ir) == LOW) {
    puriStepper.setCurrentPosition(0);  // Reset position for puriStepper
  }

}

void puripush() {
  if (digitalRead(puri_catcher_home_sensor) == HIGH && digitalRead(ir) == LOW) {
  delay(1000); // Wait before start
  myStepper.moveTo(12800);
  while (myStepper.distanceToGo() != 0) {
    myStepper.run(); // Smooth ramped move
  }

  delay(3000); // Pause

  myStepper.setSpeed(-4000);
  while (digitalRead(puri_catcher_home_sensor) == LOW) {
    myStepper.runSpeed(); // Smooth constant return
  }
  myStepper.stop();
  delay(2000);
  myStepper.setCurrentPosition(0); // Home reset
}

}

void puriopn() {
  if (digitalRead(cat_hmp) == HIGH) {
  //delay(1000); // Wait before start

  // Move forward
  puriopen.moveTo(6800);
  while (puriopen.distanceToGo() != 0) {
    puriopen.run();
  }

  delay(3000); // Pause

  // Move backward continuously until home sensor is HIGH
  puriopen.setSpeed(-500);
  while (digitalRead(cat_hmp) == LOW) {
    puriopen.runSpeed();
  }

  puriopen.stop();
  delay(2000);
  puriopen.setCurrentPosition(0); // Reset position at home
  } 
}
